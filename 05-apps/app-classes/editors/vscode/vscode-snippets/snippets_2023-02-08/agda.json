{
  "agda module common": {
    "prefix": "mod",
    "body": [
      "module ${RELATIVE_FILEPATH/src\\/(.+?)\\/(.+?)\\/(.+?)\\.agda$/$1.$2.$3/g} where",
      "module ${TM_FILEPATH/.*?\\\\/(?:src|std|test)\\\\/(.+)\\\\/(.+).agda$/$1.$2/gm} where",
      "",
      "open import Agda.Primitive public using (Level; _⊔_; lzero; lsuc)",
      "",
      "-- -----------------------------------------------------------------",
      "-- ${TM_FILENAME_BASE}",
      "-- -----------------------------------------------------------------",
      "$0",
    ],
  },
  "agda module": {
    "description": "agda: module",
    "prefix": "module",
    "body": [
      "-- {-# OPTIONS --without-K #-}",
      "-- {-# OPTIONS --safe      #-}",
      "-- {-# OPTIONS --rewrite   #-}",
      "-- {-# OPTIONS --prop      #-}",

      "module ${RELATIVE_FILEPATH/src\\/(.+?)\\/(.+?)\\/(.+?)\\.agda$/$1.$2.$3/g} where",
      "module ${TM_FILEPATH/.*?\\\\/(?:src|std|test)\\\\/(.+)\\\\/(.+).agda$/$1.$2/gm} where",
      "-- ${RELATIVE_FILEPATH}\n",

      "-- open import Data.Nat using (ℕ; zero; suc; _+_; _⨯_)",
      "-- open import Eq using (_≡_; refl; cong; sym)",
      "-- open import Relation.Binary.PropositionalEquality using (refl; cong)",
      "-- open import Level using (Level; _⊔_; suc)\n",

      "-- open import Agda.Primitive public",
      "--            using    (Level)",
      "--            using    (_⊔_)",
      "--            using    (lzero)",
      "--            using    (lsuc)",
      "--            renaming (Set  to Type)",
      "--            renaming (Setω to Typeω)\n",

      "-- | Basic type universes and universe levels",
      "open import Agda.Primitive public",
      "  using (Level; _⊔_; lzero; lsuc)",
      "  renaming (Set to Type)",


      "-- -----------------------------------------------------------------",
      "-- ${TM_FILENAME_BASE}",
      "-- -----------------------------------------------------------------",
      "${BLOCK_COMMENT_START}",
      "$1",
      "${BLOCK_COMMENT_END}",
      "$0",
    ]
  },
  "agda level": {
    "prefix": "level",
    "body": [
      "open import Agda.Primitive public",
      "     using    (Level)",
      "     using    (_⊔_)",
      "     using    (lzero)",
      "     using    (lsuc)",
      "     renaming (Set  to Type)",
      "     renaming (Setω to Typeω)",
    ],
  },
  "agda private variable": {
    "prefix": "var",
    "body": [
      "private",
      "  variable",
      "    ℓ α β γ δ : Level",
      "    S : Set ℓ",
      "    A : Set α",
      "    B : Set β",
      "    C : Set γ",
      "    D : Set δ",
    ],
  },

}


/*

"-- | Basic type universes and universe levels",
"open import Agda.Primitive public",
"  renaming (Set to Type)",
"  using (Prop; Level; _⊔_; lzero; lsuc)",


  Place your snippets for agda here.
  Each snippet is defined under a snippet name and has a prefix, body and desc. The prefix is what is used to trigger the snippet and the body will be expanded and inserted.

  Possible variables are:
  $1, $2 for tab stops
  $0 for the final cursor position
  ${1:label}, ${2:another} for placeholders
  Placeholders with the same ids are connected.
*/
