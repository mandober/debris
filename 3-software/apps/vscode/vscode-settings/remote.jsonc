{

  // When enabled, new running processes are detected and ports that they listen on are automatically forwarded. Disabling this setting will not prevent all ports from being forwarded. Even when disabled, extensions will still be able to cause ports to be forwarded, and opening some URLs will still cause ports to forwarded.
  "remote.autoForwardPorts": true,

  // Sets the source from which ports are automatically forwarded when `remote.autoForwardPorts` is true. On Windows and Mac remotes, the `process` option has no effect and `output` will be used. Requires a reload to take effect.
  //  - process: Ports will be automatically forwarded when discovered by watching for processes that are started and include a port.
  //  - output: Ports will be automatically forwarded when discovered by reading terminal and debug output. Not all processes that use ports will print to the integrated terminal or debug console, so some ports will be missed. Ports forwarded based on output will not be "un-forwarded" until reload or until the port is closed by the user in the Ports view.
  "remote.autoForwardPortsSource": "process",

  // When enabled extensions are downloaded locally and installed on remote.
  "remote.downloadExtensionsLocally": false,

  // Override the kind of an extension. `ui` extensions are installed and run on the local machine while `workspace` extensions are run on the remote. By overriding an extension's default kind using this setting, you specify if that extension should be installed and enabled locally or remotely.
  "remote.extensionKind": {
    "pub.name": [
      "ui"
    ]
  },

  // Specifies the local host name that will be used for port forwarding.
  "remote.localPortHost": "localhost",

  // Set default properties that are applied to all ports that don't get properties from the setting `remote.portsAttributes`. For example:
  // 
  // ```
  // {
  //   "onAutoForward": "ignore"
  // }
  // ```
  "remote.otherPortsAttributes": {},

  // Set properties that are applied when a specific port number is forwarded. For example:
  // 
  // ```
  // "3000": {
  //   "label": "Application"
  // },
  // "40000-55000": {
  //   "onAutoForward": "ignore"
  // },
  // ".+\\/server.js": {
  //  "onAutoForward": "openPreview"
  // }
  // ```
  "remote.portsAttributes": {
    "443": {
      "protocol": "https"
    },
    "8443": {
      "protocol": "https"
    }
  },

  // Restores the ports you forwarded in a workspace.
  "remote.restoreForwardedPorts": true,



// =========================================================================


  // Controls whether a Docker volume should be used to cache the VS Code server and extensions. Currently only applies to single container and not Docker Compose configurations.
  "remote.containers.cacheVolume": true,

  // Controls whether the Git configuration (`~/.gitconfig`) should be copied into the container. This is done after installing any `dotfiles.repository` and will not overwrite an existing Git configuration file.
  "remote.containers.copyGitConfig": true,

  // Configures the list of extensions to always install while creating a container.
  "remote.containers.defaultExtensions": [],

  // Docker Compose executable name or path.
  "remote.containers.dockerComposePath": "docker-compose",

  // Docker (or Podman) executable name or path.
  "remote.containers.dockerPath": "docker",

  // The command to run after cloning the dotfiles repository for DevContainers. This overrides the common setting for the dotfiles install command.
  "remote.containers.dotfiles.installCommand": "",

  // URL of a dotfiles Git repository (e.g., https://github.com/owner/repository.git) or owner/repository of a GitHub repository for DevContainers. This overrides the common setting for the dotfiles repository.
  "remote.containers.dotfiles.repository": "",

  // The path to clone the dotfiles repository to for DevContainers. This overrides the common setting for the dotfiles target path.
  "remote.containers.dotfiles.targetPath": "",

  // Controls whether CLI commands should always be executed in WSL. The default is to only execute in WSL for workspace folders in WSL. This setting has no effect on other platforms than Windows.
  "remote.containers.executeInWSL": false,

  // WSL distro to use when not reopening a WSL folder. The default is to use the default WSL distro (see `wsl -l`). This setting has no effect when `remote.containers.executeInWSL` is not enabled or on other platforms than Windows.
  "remote.containers.executeInWSLDistro": "",

  // Where to write the configuration for the Git credential helper.
  //  - system: Write to system config (`/etc/gitconfig`, requires root access).
  //  - global: Write to user config (`~/.gitconfig`).
  //  - none: Do not set a credential helper.
  "remote.containers.gitCredentialHelperConfigLocation": "global",

  // The log level for the extension.
  "remote.containers.logLevel": "debug",

  // List of additional paths to search for [repository configurations](https://github.com/microsoft/vscode-dev-containers/tree/main/repository-containers).
  "remote.containers.repositoryConfigurationPaths": [],

  // The consistency level used for the workspace mount (existing containers must be rebuilt to take effect).
  //  - consistent: Perfect consistency.
  //  - cached: The host's view is authoritative.
  //  - delegated: The container's view is authoritative.
  "remote.containers.workspaceMountConsistency": "cached",

// =========================================================================


  // Deprecated, please use `remote.SSH.localServerDownload`
  // If downloading the VS Code server fails on the host, this allows the extension to fall back to downloading on the client and transferring it to the host with scp.
  "remote.SSH.allowLocalServerDownload": true,

  // The absolute file path to a custom SSH config file.
  "remote.SSH.configFile": "",

  // Specifies the timeout in seconds used for the SSH command that connects to the remote.
  "remote.SSH.connectTimeout": 15,

  // List of extensions that should be installed automatically on all SSH hosts.
  "remote.SSH.defaultExtensions": [],

  // A list of ports to forward when the connection is established.
  "remote.SSH.defaultForwardedPorts": [],

  // Enable fixing the remote environment so that the SSH config option `ForwardAgent` will take effect as expected from VS Code's remote extension host.
  "remote.SSH.enableAgentForwarding": true,

  // Whether to use SSH dynamic forwarding to allow setting up new port tunnels over an existing SSH connection. When this is used, a password only needs to be entered once for each remote window.
  "remote.SSH.enableDynamicForwarding": true,

  // **Experimental:** Enable using RemoteCommands from ssh config entries. This is only enabled if `remote.ssh.useLocalServer#` is enabled as well and the remote you are trying to connect to is not listed under the `#remote.SSH.remotePlatform` setting.
  "remote.SSH.enableRemoteCommand": false,

  // Enable fixing the remote environment so that the SSH config option `ForwardX11` will take effect as expected from VS Code's remote extension host.
  "remote.SSH.enableX11Forwarding": true,

  // Specifies the order in which to display folders under SSH Targets in the Remote Explorer.
  "remote.SSH.foldersSortOrder": "most recently used",

  // Whether the extension can download the VS Code Server on the client and transfer it to the host with scp, instead of downloading it on the host.
  //  - auto: The server will first be downloaded on the host, and if that fails, will fall back to downloading locally
  //  - always: The server will only be downloaded locally and transferred to the host
  //  - off: The server will only be downloaded on the host
  "remote.SSH.localServerDownload": "auto",

  // Whether to keep lockfiles in `/tmp` instead of in the server's install folder. Useful for connecting to hosts which have issues with locking, such as hosts with a home directory using NFS or another distributed filesystem.
  "remote.SSH.lockfilesInTmp": false,

  // The log level for the extension.
  "remote.SSH.logLevel": "debug",

  // The maximum number of times to attempt reconnection. Use 0 to disallow reconnection, and `null` to use the maximum of 8.
  "remote.SSH.maxReconnectionAttempts": null,

  // An absolute path to the SSH executable. When empty, it will use "ssh" on the path or in common install locations.
  "remote.SSH.path": "",

  // A map of the remote hostname to the platform for that remote. Valid values: `linux`, `macOS`, `windows`. Note - this setting will soon be required when useLocalServer is disabled, so it is currently being autopopulated for successful connections, but is not currently used.
  "remote.SSH.remotePlatform": {},

  // When true, the remote VS Code server will listen on a socket path instead of opening a port. Only valid for Linux and macOS remotes. After toggling this setting, run the command "Kill VS Code Server on Host..." for it to take effect. Requires OpenSSH 6.7+. Disables the "local server" connection multiplexing mode. Requires `AllowStreamLocalForwarding` to be enabled for the SSH server.
  "remote.SSH.remoteServerListenOnSocket": false,

  // A map of remote host to absolute path where the VS Code server will be installed. By default the server is installed in the home directory of every remote. **Note**: By changing this setting you may need to clean up other installations of `.vscode-server` on your remote that isn't in the path you've configured.
  "remote.SSH.serverInstallPath": {},

  // A map of the remote hostname to a range of ports you'd prefer the server to connect to on launch on the remote machine. If no free port is found in range, an error will be thrown. Valid ranges of the form `number-number` such as `4000-5000`; it's expected the first number will be lower than the next.
  "remote.SSH.serverPickPortsFromRange": {},

  // Always reveal the SSH login terminal.
  "remote.SSH.showLoginTerminal": false,

  // Due to a bug with password handling in some versions of the SSH client bundled with Windows, the extension prefers a non-Windows SSH client, such as the one bundled with Git, and will show a warning when another one can't be found. This setting disables that warning.
  "remote.SSH.suppressWindowsSshWarning": false,

  // Whether to use `flock` for creating lockfiles on Linux remotes instead of `ln`. By default, we use `flock` on Linux remotes and `ln` on macOS.
  "remote.SSH.useFlock": true,

  // Enables a mode for connecting using a single connection shared between windows and across window reloads. This makes it faster to open new windows and reduces the number of times a password needs to be entered.
  "remote.SSH.useLocalServer": true,

  // Deprecated: Please use `remote.SSH.remotePlatorm` instead
  // **Deprecated**: Enables experimental support for connecting to Windows remotes. Add the names of windows remotes to this list.
  "remote.SSH.windowsRemotes": [],

// =========================================================================

  // If set, the output in the WSL log shows debug information.
  "remote.WSL.debug": false,

  // If set, polling is used for file watching inside WSL1. Polling can be CPU intensive but fixes the WSL1 issue that folders can not be renamed when watched. This option requires restart to take effect.
  "remote.WSL.fileWatcher.polling": false,

  // The file watcher polling interval in ms used inside WSL1 distros if `remote.WSL.fileWatcher.polling` is set.
  // This option requires restart to take effect.
  "remote.WSL.fileWatcher.pollingInterval": 5000,

  // Use `remote.WSL2.connectionMethod` instead.
  // If set, the connection to a VS Code server running in WSL2 will use localhost (::1). If not set, the connection will directly use the WSL2 VM's IP addresss if accessible or localhost if not.
  "remote.WSL.server.connectThroughLocalhost": false,

  // If set, the WSL windows gets the environment from the shell it was opened from.
  "remote.WSL.useShellEnvironment": true,

  // Specifies how Remote - WSL will connect to the VS Code server running in WSL1 distros. This option requires restart to take effect.
  //  - localhost: Connects to the server in WSL though 127.0.0.1 which is beeing shared between Windows and WSL1.
  //  - wslExeProxy: Connects to the server in WSL through a local proxy server that uses 'wsl.exe' to forward the connection to WSL.
  "remote.WSL1.connectionMethod": "localhost",

  // Specifies how Remote - WSL will connect to the VS Code server running in WSL2 distros. This option requires restart to take effect.
  //  - localhost: Connects to the server in WSL though localhost (::1) which is forwarded to the WSL2 VM by Windows.
  //  - wsl2VMAddress: Connects to the server in WSL though the IP address of the WSL2 VM.
  //  - wslExeProxy: Connects to the server in WSL through a local proxy server that uses 'wsl.exe' to forward the connection to WSL.
  "remote.WSL2.connectionMethod": "wslExeProxy",
}
