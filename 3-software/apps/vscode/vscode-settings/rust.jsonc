{
  // Start RLS automatically when opening a file or project.
  "rust-client.autoStartRls": true,

  // Rust channel to invoke rustup with. Ignored if rustup is disabled. By default, uses the same channel as your currently open project.
  "rust-client.channel": "default",

  // Disable usage of rustup and use rustc/rls from PATH.
  "rust-client.disableRustup": false,

  // Allow multiple projects in the same folder, along with removing the constraint that the cargo.toml must be located at the root. (Experimental: might not work for certain setups)
  "rust-client.enableMultiProjectSetup": null,

  // The underlying LSP server used to provide IDE support for Rust projects.
  //  - rls: Use the Rust Language Server (RLS)
  //  - rust-analyzer: Use the rust-analyzer language server (NOTE: not fully supported yet)
  "rust-client.engine": "rls",

  // When set to true, RLS stderr is logged to a file at workspace root level. Requires reloading extension after change.
  "rust-client.logToFile": false,

  // Specifies message severity on which the output channel will be revealed. Requires reloading extension after change.
  "rust-client.revealOutputChannelOn": "never",

  // Override RLS path. Only required for RLS developers. If you set this and use rustup, you should also set `rust-client.channel` to ensure your RLS sees the right libraries. If you don't use rustup, make sure to set `rust-client.disableRustup`.
  "rust-client.rlsPath": null,

  // Path to rustup executable. Ignored if rustup is disabled.
  "rust-client.rustupPath": "rustup",

  // Traces the communication between VS Code and the Rust language server.
  "rust-client.trace.server": "off",

  // Update the Rust toolchain and its required components whenever the extension starts up.
  "rust-client.updateOnStartup": false,

  // Enable all Cargo features.
  "rust.all_features": false,

  // Checks the project as if you were running cargo check --all-targets (I.e., check all targets and integration tests too).
  "rust.all_targets": true,

  // Specify to run analysis as if running `cargo check --bin <name>`. Use `null` to auto-detect. (unstable)
  "rust.build_bin": null,

  // EXPERIMENTAL (requires `unstable_features`)
  // If set, executes a given program responsible for rebuilding save-analysis to be loaded by the RLS. The program given should output a list of resulting .json files on stdout. 
  // Implies `rust.build_on_save`: true.
  "rust.build_command": null,

  // Specify to run analysis as if running `cargo check --lib`. Use `null` to auto-detect. (unstable)
  "rust.build_lib": null,

  // Only index the project when a file is saved and not on change.
  "rust.build_on_save": false,

  // Build cfg(test) code. (unstable)
  "rust.cfg_test": false,

  // Clear the RUST_LOG environment variable before running rustc or cargo.
  "rust.clear_env_rust_log": true,

  // Controls eagerness of clippy diagnostics when available. Valid values are (case-insensitive):
  //  - "off": Disable clippy lints.
  //  - "on": Display the same diagnostics as command-line clippy invoked with no arguments (`clippy::all` unless overridden).
  //  - "opt-in": Only display the lints explicitly enabled in the code. Start by adding `#![warn(clippy::all)]` to the root of each crate you want linted.
  // You need to install clippy via rustup if you haven't already.
  "rust.clippy_preference": "opt-in",

  // Overrides the default list of packages for which analysis is skipped.
  // Available since RLS 1.38
  "rust.crate_blacklist": [
    "cocoa",
    "gleam",
    "glium",
    "idna",
    "libc",
    "openssl",
    "rustc_serialize",
    "serde",
    "serde_json",
    "typenum",
    "unicode_normalization",
    "unicode_segmentation",
    "winapi"
  ],

  // A list of Cargo features to enable.
  "rust.features": [],

  // Instructs cargo to enable full documentation extraction during save-analysis while building the crate.
  "rust.full_docs": null,

  // Number of Cargo jobs to be run in parallel.
  "rust.jobs": null,

  // Do not enable default Cargo features.
  "rust.no_default_features": false,

  // Enables code completion using racer.
  "rust.racer_completion": true,

  // Settings passed down to rust-analyzer server
  "rust.rust-analyzer": {
    "releaseTag": "nightly",
    "path": null
  },

  // When specified, uses the rust-analyzer binary at a given path
  "rust.rust-analyzer.path": null,

  // Which binary release to download and use
  "rust.rust-analyzer.releaseTag": "nightly",

  // Flags added to RUSTFLAGS.
  "rust.rustflags": null,

  // When specified, RLS will use the Rustfmt pointed at the path instead of the bundled one
  "rust.rustfmt_path": null,

  // Show additional context in hover tooltips when available. This is often the type local variable declaration.
  "rust.show_hover_context": true,

  // Show warnings.
  "rust.show_warnings": true,

  // --sysroot
  "rust.sysroot": null,

  // --target
  "rust.target": null,

  // When specified, it places the generated analysis files at the specified target directory. By default it is placed target/rls directory.
  "rust.target_dir": null,

  // Enable unstable features.
  "rust.unstable_features": false,

  // Time in milliseconds between receiving a change notification and starting build.
  "rust.wait_to_build": null,

}
