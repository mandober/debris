{

  // Controls the behavior of clicking an activity bar icon in the workbench.
  //  - toggle: Hide the side bar if the clicked item is already visible.
  //  - focus: Focus side bar if the clicked item is already visible.
  "workbench.activityBar.iconClickBehavior": "toggle",

  // Controls the visibility of the activity bar in the workbench.
  "workbench.activityBar.visible": true,

  // Overrides colors from the currently selected color theme.
  "workbench.colorCustomizations": {},

  // Specifies the color theme used in the workbench.
  "workbench.colorTheme": "Default Dark+",

  // Controls the number of recently used commands to keep in history for the command palette. Set to 0 to disable command history.
  "workbench.commandPalette.history": 50,

  // Controls whether the last typed input to the command palette should be restored when opening it the next time.
  "workbench.commandPalette.preserveInput": false,

  // If an editor matching one of the listed types is opened as the first in an editor group and more than one group is open, the group is automatically locked. Locked groups will only be used for opening editors when explicitly chosen by user gesture (e.g. drag and drop), but not by default. Consequently the active editor in a locked group is less likely to be replaced accidentally with a different editor.
  "workbench.editor.autoLockGroups": {
    "default": false,
    "workbench.input.interactive": false,
    "interactive": false,
    "workbench.editorinputs.searchEditorInput": false,
    "imagePreview.previewEditor": false,
    "vscode.markdown.preview.editor": false,
    "jsProfileVisualizer.cpuprofile.table": false,
    "jsProfileVisualizer.heapprofile.table": false,
    "terminalEditor": true,
    "jupyter-notebook": false,
    "mainThreadWebview-markdown.preview": false
  },

  // Controls if the centered layout should automatically resize to maximum width when more than one group is open. Once only one group is open it will resize back to the original centered width.
  "workbench.editor.centeredLayoutAutoResize": true,

  // Controls the behavior of empty editor groups when the last tab in the group is closed. When enabled, empty groups will automatically close. When disabled, empty groups will remain part of the grid.
  "workbench.editor.closeEmptyGroups": true,

  // Controls whether editors showing a file that was opened during the session should close automatically when getting deleted or renamed by some other process. Disabling this will keep the editor open  on such an event. Note that deleting from within the application will always close the editor and that editors with unsaved changes will never close to preserve your data.
  "workbench.editor.closeOnFileDelete": false,

  // Controls whether editor file decorations should use badges.
  "workbench.editor.decorations.badges": true,

  // Controls whether editor file decorations should use colors.
  "workbench.editor.decorations.colors": true,

  // The default editor for files detected as binary. If undefined the user will be presented with a picker.
  "workbench.editor.defaultBinaryEditor": "",

  // Controls whether opened editors show as preview editors. Preview editors do not stay open, are reused until explicitly set to be kept open (e.g. via double click or editing), and show file names in italics.
  "workbench.editor.enablePreview": true,

  // Controls whether editors remain in preview when a code navigation is started from them. Preview editors do not stay open, and are reused until explicitly set to be kept open (e.g. via double click or editing). This value is ignored when `workbench.editor.enablePreview` is disabled.
  "workbench.editor.enablePreviewFromCodeNavigation": false,

  // Controls whether editors opened from Quick Open show as preview editors. Preview editors do not stay open, and are reused until explicitly set to be kept open (e.g. via double click or editing). This value is ignored when `workbench.editor.enablePreview` is disabled.
  "workbench.editor.enablePreviewFromQuickOpen": false,

  // Controls whether tabs are closed in most recently used order or from left to right.
  "workbench.editor.focusRecentEditorAfterClose": true,

  // Controls whether a top border is drawn on tabs for editors that have unsaved changes. This value is ignored when `workbench.editor.showTabs` is disabled.
  "workbench.editor.highlightModifiedTabs": false,

  // Enables use of editor history in language detection. This causes automatic language detection to favor languages that have been recently opened and allows for automatic language detection to operate with smaller inputs.
  "workbench.editor.historyBasedLanguageDetection": true,

  // Controls the format of the label for an editor.
  //  - default: Show the name of the file. When tabs are enabled and two files have the same name in one group the distinguishing sections of each file's path are added. When tabs are disabled, the path relative to the workspace folder is shown if the editor is active.
  //  - short: Show the name of the file followed by its directory name.
  //  - medium: Show the name of the file followed by its path relative to the workspace folder.
  //  - long: Show the name of the file followed by its absolute path.
  "workbench.editor.labelFormat": "default",

  // Controls whether the language in a text editor is automatically detected unless the language has been explicitly set by the language picker. This can also be scoped by language so you can specify which languages you do not want to be switched off of. This is useful for languages like Markdown that often contain other languages that might trick language detection into thinking it's the embedded language and not Markdown.
  "workbench.editor.languageDetection": true,

  // When enabled, shows a status bar quick fix when the editor language doesn't match detected content language.
  "workbench.editor.languageDetectionHints": {
    "untitledEditors": true,
    "notebookEditors": false
  },

  // Controls if the number of opened editors should be limited or not. When enabled, less recently used editors will close to make space for newly opening editors.
  "workbench.editor.limit.enabled": false,

  // Controls if the maximum number of opened editors should exclude dirty editors for counting towards the configured limit.
  "workbench.editor.limit.excludeDirty": false,

  // Controls if the limit of maximum opened editors should apply per editor group or across all editor groups.
  "workbench.editor.limit.perEditorGroup": false,

  // Controls the maximum number of opened editors. Use the `workbench.editor.limit.perEditorGroup` setting to control this limit per editor group or across all groups.
  "workbench.editor.limit.value": 10,

  // Enables the use of mouse buttons four and five for commands 'Go Back' and 'Go Forward'.
  "workbench.editor.mouseBackForwardToNavigate": true,

  // Controls the scope of history navigation in editors for commands such as 'Go Back' and 'Go Forward'.
  //  - default: Navigate across all opened editors and editor groups.
  //  - editorGroup: Navigate only in editors of the active editor group.
  //  - editor: Navigate only in the active editor.
  "workbench.editor.navigationScope": "default",

  // Controls where editors open. Select `left` or `right` to open editors to the left or right of the currently active one. Select `first` or `last` to open editors independently from the currently active one.
  "workbench.editor.openPositioning": "right",

  // Controls the default direction of editors that are opened side by side (for example, from the Explorer). By default, editors will open on the right hand side of the currently active one. If changed to `down`, the editors will open below the currently active one.
  "workbench.editor.openSideBySideDirection": "right",

  // Controls the sizing of pinned editor tabs. Pinned tabs are sorted to the beginning of all opened tabs and typically do not close until unpinned. This value is ignored when `workbench.editor.showTabs` is disabled.
  //  - normal: A pinned tab inherits the look of non pinned tabs.
  //  - compact: A pinned tab will show in a compact form with only icon or first letter of the editor name.
  //  - shrink: A pinned tab shrinks to a compact fixed size showing parts of the editor name.
  "workbench.editor.pinnedTabSizing": "normal",

  // When enabled, a language detection model that takes into account editor history will be given higher precedence.
  "workbench.editor.preferHistoryBasedLanguageDetection": false,

  // Restores the last editor view state (e.g. scroll position) when re-opening editors after they have been closed. Editor view state is stored per editor group and discarded when a group closes. Use the `workbench.editor.sharedViewState` setting to use the last known view state across all editor groups in case no previous view state was found for a editor group.
  "workbench.editor.restoreViewState": true,

  // Controls whether an editor is revealed in any of the visible groups if opened. If disabled, an editor will prefer to open in the currently active editor group. If enabled, an already opened editor will be revealed instead of opened again in the currently active editor group. Note that there are some cases where this setting is ignored, e.g. when forcing an editor to open in a specific group or to the side of the currently active group.
  "workbench.editor.revealIfOpen": false,

  // Controls whether scrolling over tabs will open them or not. By default tabs will only reveal upon scrolling, but not open. You can press and hold the Shift-key while scrolling to change this behavior for that duration. This value is ignored when `workbench.editor.showTabs` is disabled.
  "workbench.editor.scrollToSwitchTabs": false,

  // Preserves the most recent editor view state (e.g. scroll position) across all editor groups and restores that if no specific editor view state is found for the editor group.
  "workbench.editor.sharedViewState": false,

  // Controls whether opened editors should show with an icon or not. This requires a file icon theme to be enabled as well.
  "workbench.editor.showIcons": true,

  // Controls whether opened editors should show in tabs or not.
  "workbench.editor.showTabs": true,

  // Controls the layout for when an editor is split in an editor group to be either vertical or horizontal.
  //  - vertical: Editors are positioned from top to bottom.
  //  - horizontal: Editors are positioned from left to right.
  "workbench.editor.splitInGroupLayout": "horizontal",

  // Controls if editor groups can be split from drag and drop operations by dropping an editor or file on the edges of the editor area.
  "workbench.editor.splitOnDragAndDrop": true,

  // Controls the sizing of editor groups when splitting them.
  //  - distribute: Splits all the editor groups to equal parts.
  //  - split: Splits the active editor group to equal parts.
  "workbench.editor.splitSizing": "distribute",

  // Controls the position of the editor's tabs close buttons, or disables them when set to 'off'. This value is ignored when `workbench.editor.showTabs` is disabled.
  "workbench.editor.tabCloseButton": "right",

  // Controls the sizing of editor tabs. This value is ignored when `workbench.editor.showTabs` is disabled.
  //  - fit: Always keep tabs large enough to show the full editor label.
  //  - shrink: Allow tabs to get smaller when the available space is not enough to show all tabs at once.
  "workbench.editor.tabSizing": "fit",

  // Controls the height of the scrollbars used for tabs and breadcrumbs in the editor title area.
  //  - default: The default size.
  //  - large: Increases the size, so it can be grabbed more easily with the mouse.
  "workbench.editor.titleScrollbarSizing": "default",

  // Controls if the untitled hint should be inline text in the editor or a floating button or hidden.
  "workbench.editor.untitled.hint": "text",

  // Controls the format of the label for an untitled editor.
  //  - content: The name of the untitled file is derived from the contents of its first line unless it has an associated file path. It will fallback to the name in case the line is empty or contains no word characters.
  //  - name: The name of the untitled file is not derived from the contents of the file.
  "workbench.editor.untitled.labelFormat": "content",

  // Controls whether tabs should be wrapped over multiple lines when exceeding available space or whether a scrollbar should appear instead. This value is ignored when `workbench.editor.showTabs` is disabled.
  "workbench.editor.wrapTabs": false,

  // Configure glob patterns to editors (e.g. `"*.hex": "hexEditor.hexEdit"`). These have precedence over the default behavior.
  "workbench.editorAssociations": {},

  // Fetches experiments to run from a Microsoft online service.
  "workbench.enableExperiments": true,

  // Controls whether you can drag and drop a file into a text editor by holding down `shift` (instead of opening the file in an editor).
  "workbench.experimental.editor.dropIntoEditor.enabled": true,

  // This setting has been deprecated in favor of `workbench.layoutControl.enabled`
  // Controls whether the layout controls in the custom title bar is enabled via `window.titleBarStyle`.
  "workbench.experimental.layoutControl.enabled": false,

  // This setting has been deprecated in favor of `workbench.layoutControl.type`
  // Controls whether the layout control in the custom title bar is displayed as a single menu button or with multiple UI toggles.
  //  - menu: Shows a single button with a dropdown of layout options.
  //  - toggles: Shows several buttons for toggling the visibility of the panels and side bar.
  //  - both: Shows both the dropdown and toggle buttons.
  "workbench.experimental.layoutControl.type": "both",

  // Configure the opener to use for external URIs (http, https).
  "workbench.externalUriOpeners": {},

  // Controls the delay in milliseconds after which the hover is shown for workbench items (ex. some extension provided tree view items). Already visible items may require a refresh before reflecting this setting change.
  "workbench.hover.delay": 500,

  // Specifies the file icon theme used in the workbench or 'null' to not show any file icons.
  //  - null: No file icons
  //  - vs-minimal
  //  - vs-seti
  //  - material-icon-theme
  "workbench.iconTheme": "vs-seti",

  // Controls whether the layout controls in the custom title bar is enabled via `window.titleBarStyle`.
  "workbench.layoutControl.enabled": true,

  // Controls whether the layout control in the custom title bar is displayed as a single menu button or with multiple UI toggles.
  //  - menu: Shows a single button with a dropdown of layout options.
  //  - toggles: Shows several buttons for toggling the visibility of the panels and side bar.
  //  - both: Shows both the dropdown and toggle buttons.
  "workbench.layoutControl.type": "both",

  // Controls whether keyboard navigation in lists and trees is automatically triggered simply by typing. If set to `false`, keyboard navigation is only triggered when executing the `list.toggleKeyboardNavigation` command, for which you can assign a keyboard shortcut.
  "workbench.list.automaticKeyboardNavigation": true,

  // Scrolling speed multiplier when pressing `Alt`.
  "workbench.list.fastScrollSensitivity": 5,

  // Controls whether lists and trees support horizontal scrolling in the workbench. Warning: turning on this setting has a performance implication.
  "workbench.list.horizontalScrolling": false,

  // Controls the keyboard navigation style for lists and trees in the workbench. Can be simple, highlight and filter.
  //  - simple: Simple keyboard navigation focuses elements which match the keyboard input. Matching is done only on prefixes.
  //  - highlight: Highlight keyboard navigation highlights elements which match the keyboard input. Further up and down navigation will traverse only the highlighted elements.
  //  - filter: Filter keyboard navigation will filter out and hide all the elements which do not match the keyboard input.
  "workbench.list.keyboardNavigation": "highlight",

  // A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.
  "workbench.list.mouseWheelScrollSensitivity": 1,

  // The modifier to be used to add an item in trees and lists to a multi-selection with the mouse (for example in the explorer, open editors and scm view). The 'Open to Side' mouse gestures - if supported - will adapt such that they do not conflict with the multiselect modifier.
  //  - ctrlCmd: Maps to `Control` on Windows and Linux and to `Command` on macOS.
  //  - alt: Maps to `Alt` on Windows and Linux and to `Option` on macOS.
  "workbench.list.multiSelectModifier": "ctrlCmd",

  // Controls how to open items in trees and lists using the mouse (if supported). Note that some trees and lists might choose to ignore this setting if it is not applicable.
  "workbench.list.openMode": "singleClick",

  // Controls whether lists and trees have smooth scrolling.
  "workbench.list.smoothScrolling": false,

  // Controls whether local file history is enabled. When enabled, the file contents of an editor that is saved will be stored to a backup location to be able to restore or review the contents later. Changing this setting has no effect on existing local file history entries.
  "workbench.localHistory.enabled": true,

  // Configure [glob patterns](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) for excluding files from the local file history. Changing this setting has no effect on existing local file history entries.
  "workbench.localHistory.exclude": {},

  // Controls the maximum number of local file history entries per file. When the number of local file history entries exceeds this number for a file, the oldest entries will be discarded.
  "workbench.localHistory.maxFileEntries": 50,

  // Controls the maximum size of a file (in KB) to be considered for local file history. Files that are larger will not be added to the local file history. Changing this setting has no effect on existing local file history entries.
  "workbench.localHistory.maxFileSize": 256,

  // Configure an interval in seconds during which the last entry in local file history is replaced with the entry that is being added. This helps reduce the overall number of entries that are added, for example when auto save is enabled. This setting is only applied to entries that have the same source of origin. Changing this setting has no effect on existing local file history entries.
  "workbench.localHistory.mergeWindow": 10,

  // Controls the default location of the panel (terminal, debug console, output, problems) in a new workspace. It can either show at the bottom, right, or left of the editor area.
  "workbench.panel.defaultLocation": "bottom",

  // Controls whether the panel opens maximized. It can either always open maximized, never open maximized, or open to the last state it was in before being closed.
  //  - always: Always maximize the panel when opening it.
  //  - never: Never maximize the panel when opening it. The panel will open un-maximized.
  //  - preserve: Open the panel to the state that it was in, before it was closed.
  "workbench.panel.opensMaximized": "preserve",

  // Specifies the preferred color theme for dark OS appearance when `window.autoDetectColorScheme` is enabled.
  "workbench.preferredDarkColorTheme": "Default Dark+",

  // Specifies the preferred color theme used in high contrast dark mode when `window.autoDetectHighContrast` is enabled.
  "workbench.preferredHighContrastColorTheme": "Default High Contrast",

  // Specifies the preferred color theme used in high contrast light mode when `window.autoDetectHighContrast` is enabled.
  "workbench.preferredHighContrastLightColorTheme": "Default High Contrast Light",

  // Specifies the preferred color theme for light OS appearance when `window.autoDetectColorScheme` is enabled.
  "workbench.preferredLightColorTheme": "Default Light+",

  // Specifies the product icon theme used.
  //  - Default: Default
  "workbench.productIconTheme": "Default",

  // Controls whether Quick Open should close automatically once it loses focus.
  "workbench.quickOpen.closeOnFocusLost": true,

  // Controls whether the last typed input to Quick Open should be restored when opening it the next time.
  "workbench.quickOpen.preserveInput": false,

  // Controls whether the workbench should render with fewer animations.
  //  - on: Always render with reduced motion.
  //  - off: Do not render with reduced motion
  //  - auto: Render with reduced motion based on OS configuration.
  "workbench.reduceMotion": "auto",

  // Controls the hover feedback delay in milliseconds of the dragging area in between views/editors.
  "workbench.sash.hoverDelay": 300,

  // Controls the feedback area size in pixels of the dragging area in between views/editors. Set it to a larger value if you feel it's hard to resize views using the mouse.
  "workbench.sash.size": 4,

  // Determines which settings editor to use by default.
  //  - ui: Use the settings UI editor.
  //  - json: Use the JSON file editor.
  "workbench.settings.editor": "ui",

  // Controls whether to enable the natural language search mode for settings. The natural language search is provided by a Microsoft online service.
  "workbench.settings.enableNaturalLanguageSearch": true,

  // Controls whether opening keybinding settings also opens an editor showing all default keybindings.
  "workbench.settings.openDefaultKeybindings": false,

  // Controls whether opening settings also opens an editor showing all default settings.
  "workbench.settings.openDefaultSettings": false,

  // Controls the behavior of the settings editor Table of Contents while searching.
  //  - hide: Hide the Table of Contents while searching.
  //  - filter: Filter the Table of Contents to just categories that have matching settings. Clicking a category will filter the results to that category.
  "workbench.settings.settingsSearchTocBehavior": "filter",

  // Controls whether to use the split JSON editor when editing settings as JSON.
  "workbench.settings.useSplitJSON": false,

  // Controls the location of the primary side bar and activity bar. They can either show on the left or right of the workbench. The secondary side bar will show on the opposite side of the workbench.
  "workbench.sideBar.location": "left",

  // Controls which editor is shown at startup, if none are restored from the previous session.
  //  - none: Start without an editor.
  //  - welcomePage: Open the Welcome page, with content to aid in getting started with VS Code and extensions.
  //  - readme: Open the README when opening a folder that contains one, fallback to 'welcomePage' otherwise. Note: This is only observed as a global configuration, it will be ignored if set in a workspace or folder configuration.
  //  - newUntitledFile: Open a new untitled file (only applies when opening an empty window).
  //  - welcomePageInEmptyWorkbench: Open the Welcome page when opening an empty workbench.
  "workbench.startupEditor": "welcomePage",

  // Controls the visibility of the status bar at the bottom of the workbench.
  "workbench.statusBar.visible": true,

  // When enabled, will show the watermark tips when no editor is open.
  "workbench.tips.enabled": true,

  // Controls how tree folders are expanded when clicking the folder names. Note that some trees and lists might choose to ignore this setting if it is not applicable.
  "workbench.tree.expandMode": "singleClick",

  // Controls tree indentation in pixels.
  "workbench.tree.indent": 8,

  // Controls whether the tree should render indent guides.
  "workbench.tree.renderIndentGuides": "onHover",

  // When enabled, trusted domain prompts will appear when opening links in trusted workspaces.
  "workbench.trustedDomains.promptInTrustedWorkspace": false,

  // Controls the visibility of view header actions. View header actions may either be always visible, or only visible when that view is focused or hovered over.
  "workbench.view.alwaysShowHeaderActions": false,

  // When enabled, the get started page has additional links to video tutorials.
  "workbench.welcomePage.experimental.videoTutorials": "off",

  // Deprecated, use the global `workbench.reduceMotion`.
  // When enabled, reduce motion in welcome page.
  "workbench.welcomePage.preferReducedMotion": false,

  // When enabled, an extension's walkthrough will open upon install of the extension.
  "workbench.welcomePage.walkthroughs.openOnInstall": true,

}
