{

  // Whether to typecheck the entire project on load. It could drive to bad performance in large projects.
  "haskell.checkProject": true,

  // The formatter to use when formatting a document or range. Ensure the plugin is enabled.
  "haskell.formattingProvider": "ormolu",

  // Manually set a ghcup executable path.
  "haskell.ghcupExecutablePath": "",

  // If set, redirects the logs to a file.
  "haskell.logFile": "",

  // How to manage/find HLS installations.
  //  - GHCup: Will use ghcup and manage Haskell toolchain in the default location (usually '~/.ghcup')
  //  - PATH: Discovers HLS and other executables in system PATH
  "haskell.manageHLS": "PATH",

  // Maximum number of completions sent to the editor.
  "haskell.maxCompletions": 40,

  // An optional URL to override where ghcup checks for tool download info (usually at: https://raw.githubusercontent.com/haskell/ghcup-metadata/master/ghcup-0.0.7.yaml)
  "haskell.metadataURL": "",

  // When opening 'Documentation' for external libraries, open in hackage by default. Set to false to instead open in vscode.
  "haskell.openDocumentationInHackage": true,

  // When opening 'Source' for external libraries, open in hackage by default. Set to false to instead open in vscode.
  "haskell.openSourceInHackage": true,

  // Enables alternateNumberFormat plugin
  "haskell.plugin.alternateNumberFormat.globalOn": true,

  // Enables callHierarchy plugin
  "haskell.plugin.callHierarchy.globalOn": true,

  // Enables changeTypeSignature plugin
  "haskell.plugin.changeTypeSignature.globalOn": true,

  // Enables class plugin
  "haskell.plugin.class.globalOn": true,

  // Enable the diff output (WAS/NOW) of eval lenses
  "haskell.plugin.eval.config.diff": true,

  // Enable marking exceptions with `*** Exception:` similarly to doctest and GHCi.
  "haskell.plugin.eval.config.exception": false,

  // Enables eval plugin
  "haskell.plugin.eval.globalOn": true,

  // Enables ghcide-code-actions-bindings plugin
  "haskell.plugin.ghcide-code-actions-bindings.globalOn": true,

  // Enables ghcide-code-actions-fill-holes plugin
  "haskell.plugin.ghcide-code-actions-fill-holes.globalOn": true,

  // Enables ghcide-code-actions-imports-exports plugin
  "haskell.plugin.ghcide-code-actions-imports-exports.globalOn": true,

  // Enables ghcide-code-actions-type-signatures plugin
  "haskell.plugin.ghcide-code-actions-type-signatures.globalOn": true,

  // Extends the import list automatically when completing a out-of-scope identifier
  "haskell.plugin.ghcide-completions.config.autoExtendOn": true,

  // Inserts snippets when using code completions
  "haskell.plugin.ghcide-completions.config.snippetsOn": true,

  // Enables ghcide-completions plugin
  "haskell.plugin.ghcide-completions.globalOn": true,

  // Enables ghcide-hover-and-symbols hover
  "haskell.plugin.ghcide-hover-and-symbols.hoverOn": true,

  // Enables ghcide-hover-and-symbols symbols
  "haskell.plugin.ghcide-hover-and-symbols.symbolsOn": true,

  // Control how type lenses are shown
  //  - always: Always displays type lenses of global bindings
  //  - exported: Only display type lenses of exported global bindings
  //  - diagnostics: Follows error messages produced by GHC about missing signatures
  "haskell.plugin.ghcide-type-lenses.config.mode": "always",

  // Enables ghcide-type-lenses plugin
  "haskell.plugin.ghcide-type-lenses.globalOn": true,

  // Enables haddockComments plugin
  "haskell.plugin.haddockComments.globalOn": true,

  // Enables hlint code actions
  "haskell.plugin.hlint.codeActionsOn": true,

  // Flags used by hlint
  "haskell.plugin.hlint.config.flags": [],

  // Enables hlint diagnostics
  "haskell.plugin.hlint.diagnosticsOn": true,

  // Enables importLens code actions
  "haskell.plugin.importLens.codeActionsOn": true,

  // Enables importLens code lenses
  "haskell.plugin.importLens.codeLensOn": true,

  // Enables moduleName plugin
  "haskell.plugin.moduleName.globalOn": true,

  // Enables pragmas code actions
  "haskell.plugin.pragmas.codeActionsOn": true,

  // Enables pragmas completions
  "haskell.plugin.pragmas.completionOn": true,

  // Enables qualifyImportedNames plugin
  "haskell.plugin.qualifyImportedNames.globalOn": true,

  // Enables refineImports code actions
  "haskell.plugin.refineImports.codeActionsOn": true,

  // Enables refineImports code lenses
  "haskell.plugin.refineImports.codeLensOn": true,

  // Enable experimental cross-module renaming
  "haskell.plugin.rename.config.crossModule": false,

  // Enables rename plugin
  "haskell.plugin.rename.globalOn": true,

  // Enables retrie plugin
  "haskell.plugin.retrie.globalOn": true,

  // Enables splice plugin
  "haskell.plugin.splice.globalOn": true,

  // Enables tactics code actions
  "haskell.plugin.tactics.codeActionsOn": true,

  // Enables tactics code lenses
  "haskell.plugin.tactics.codeLensOn": true,

  // The depth of the search tree when performing "Attempt to fill hole". Bigger values will be able to derive more solutions, but will take exponentially more time.
  "haskell.plugin.tactics.config.auto_gas": 4,

  // The severity to use when showing hole diagnostics. These are noisy, but some editors don't allow jumping to all severities.
  //  - 1: error
  //  - 2: warning
  //  - 3: info
  //  - 4: hint
  //  - null: none
  "haskell.plugin.tactics.config.hole_severity": null,

  // Maximum number of `Use constructor <x>` code actions that can appear
  "haskell.plugin.tactics.config.max_use_ctor_actions": 5,

  // Should Wingman emit styling markup when showing metaprogram proof states?
  "haskell.plugin.tactics.config.proofstate_styling": true,

  // The timeout for Wingman actions, in seconds
  "haskell.plugin.tactics.config.timeout_duration": 2,

  // Enables tactics hover
  "haskell.plugin.tactics.hoverOn": true,

// =========================================================================

  // Prompt before performing any downloads.
  "haskell.promptBeforeDownloads": true,

  // An optional path where downloaded metadata will be stored. Check the default value [here](https://github.com/haskell/vscode-haskell#downloaded-binaries)
  "haskell.releasesDownloadStoragePath": "",

  // An optional URL to override where ghcup checks for HLS-GHC compatibility list (usually at: https://raw.githubusercontent.com/haskell/ghcup-metadata/master/hls-metadata-0.0.1.json)
  "haskell.releasesURL": "",

  // Define environment variables for the language server.
  "haskell.serverEnvironment": {},

  // Manually set a language server executable. Can be something on the $PATH or the full path to the executable itself. Works with `~,` `${HOME}` and `${workspaceFolder}`. **Deprecated scope**: This option will be set to `machine` scope in a future release, so it can be changed only globally, not per workspace.
  "haskell.serverExecutablePath": "",

  // Pass additional arguments to the language server.
  "haskell.serverExtraArgs": "",

  // When manageHLS is set to GHCup, this can overwrite the automatic toolchain configuration with a more specific one. When a tool is omitted, the extension will manage the version (for 'ghc' we try to figure out the version the project requires). The format is '{"tool": "version", ...}'. 'version' accepts all identifiers that 'ghcup' accepts.
  "haskell.toolchain": {},

  // Sets the log level in the client side.
  "haskell.trace.client": "info",

  // Traces the communication between VS Code and the language server.
  "haskell.trace.server": "off",

  // Whether to upgrade GHCup automatically when 'manageHLS' is set to 'GHCup'.
  "haskell.upgradeGHCup": true,


// =========================================================================

  // Set to 'false' to disable automatically increasing
  // indent on newlines after '=', 'do', 'where', etc.
  "haskell.indentationRules.enabled": true,



// brittany ===================================================================

  // Additional flags to pass to brittany, e.g. --indent AMOUNT.
  // These are unescaped.
  // They should not attempt to change the input or output files.
  // This option mostly exists as an escape hatch - you should
  // generally prefer editing your brittany config file if possible.
  // default: ""
  "brittany.additionalFlags": "",

  // Whether the extension should be enabled.
  // default: true
  "brittany.enable": true,

  // Whether the extension should replace CRLF endings with LF.
  // default: false
  "brittany.keepCRLF": false,

  // Path to the brittany executable.
  // This will be wrapped in double quotes to escape it,
  // so your path can e.g. include spaces.
  // default: "brittany"
  "brittany.path": "brittany",

  // Whether the extension should show an error
  // message when running brittany fails.
  // default: false
  "brittany.showErrorNotification": false,

  // Whether the extension should use brittany through stack
  // (stack exec brittany) instead of brittany on the PATH.
  // default: false
  "brittany.stackEnable": false,

// end brittany ===============================================================

}
