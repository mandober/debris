{

  // Controls whether force push (with or without lease) is enabled.
  "git.allowForcePush": false,

  // Controls whether commits without running pre-commit and commit-msg hooks are allowed.
  "git.allowNoVerifyCommit": false,

  // Always show the Staged Changes resource group.
  "git.alwaysShowStagedChangesResourceGroup": false,

  // Controls the signoff flag for all commits.
  "git.alwaysSignOff": false,

  // When set to true, commits will automatically be fetched from the default remote of the current Git repository. Setting to `all` will fetch from all remotes.
  "git.autofetch": false,

  // Duration in seconds between each automatic git fetch, when `git.autofetch` is enabled.
  "git.autofetchPeriod": 180,

  // Whether auto refreshing is enabled.
  "git.autorefresh": true,

  // Configures when repositories should be automatically detected.
  //  - true: Scan for both subfolders of the current opened folder and parent folders of open files.
  //  - false: Disable automatic repository scanning.
  //  - subFolders: Scan for subfolders of the currently opened folder.
  //  - openEditors: Scan for parent folders of open files.
  "git.autoRepositoryDetection": true,

  // Stash any changes before pulling and restore them after successful pull.
  "git.autoStash": false,

  // Controls the sort order for branches.
  "git.branchSortOrder": "committerdate",

  // A regular expression to validate new branch names.
  "git.branchValidationRegex": "",

  // The character to replace whitespace in new branch names.
  "git.branchWhitespaceChar": "-",

  // Controls what type of git refs are listed when running `Checkout to...`.
  //  - local: Local branches
  //  - tags: Tags
  //  - remote: Remote branches
  "git.checkoutType": [
    "local",
    "remote",
    "tags"
  ],

  // Controls whether the diff editor should be automatically closed when changes are stashed, committed, discarded, staged, or unstaged.
  "git.closeDiffOnOperation": false,

  // List of git commands (ex: commit, push) that would have their `stdout` logged to the [git output](command:git.showOutput). If the git command has a client-side hook configured, the client-side hook's `stdout` will also be logged to the [git output](command:git.showOutput).
  "git.commandsToLog": [],

  // Always confirm the creation of empty commits for the 'Git: Commit Empty' command.
  "git.confirmEmptyCommits": true,

  // Controls whether to ask for confirmation before force-pushing.
  "git.confirmForcePush": true,

  // Controls whether to ask for confirmation before committing without verification.
  "git.confirmNoVerifyCommit": true,

  // Confirm before synchronizing git repositories.
  "git.confirmSync": true,

  // Controls the Git count badge.
  //  - all: Count all changes.
  //  - tracked: Count only tracked changes.
  //  - off: Turn off counter.
  "git.countBadge": "all",

  // Controls whether Git contributes colors and badges to the Explorer and the Open Editors view.
  "git.decorations.enabled": true,

  // The default location to clone a git repository.
  "git.defaultCloneDirectory": null,

  // Controls whether to automatically detect git submodules.
  "git.detectSubmodules": true,

  // Controls the limit of git submodules detected.
  "git.detectSubmodulesLimit": 10,

  // Enables commit signing with GPG or X.509.
  "git.enableCommitSigning": false,

  // Whether git is enabled.
  "git.enabled": true,

  // Commit all changes when there are no staged changes.
  "git.enableSmartCommit": false,

  // Controls whether the Git Sync command appears in the status bar.
  "git.enableStatusBarSync": true,

  // Experimental improvements for the git setup flow.
  "git.experimental.installGuide": "default",

  // When enabled, fetch all branches when pulling. Otherwise, fetch just the current one.
  "git.fetchOnPull": false,

  // Follow push all tags when running the sync command.
  "git.followTagsWhenSync": false,

  // This setting is now deprecated, please use `github.gitAuthentication` instead.
  // 
  "git.githubAuthentication": null,

  // List of git repositories to ignore.
  "git.ignoredRepositories": [],

  // Ignores the legacy Git warning.
  "git.ignoreLegacyWarning": false,

  // Ignores the warning when there are too many changes in a repository.
  "git.ignoreLimitWarning": false,

  // Ignores the warning when Git is missing.
  "git.ignoreMissingGitWarning": false,

  // Ignores the warning when it looks like the branch might have been rebased when pulling.
  "git.ignoreRebaseWarning": false,

  // Ignore modifications to submodules in the file tree.
  "git.ignoreSubmodules": false,

  // Ignores the warning when Git 2.25 - 2.26 is installed on Windows.
  "git.ignoreWindowsGit27Warning": false,

  // Controls when to show commit message input validation.
  "git.inputValidation": "warn",

  // Controls the commit message length threshold for showing a warning.
  "git.inputValidationLength": 72,

  // Controls the commit message subject length threshold for showing a warning. Unset it to inherit the value of `config.inputValidationLength`.
  "git.inputValidationSubjectLength": 50,

  // Controls whether to open a repository automatically after cloning.
  //  - always: Always open in current window.
  //  - alwaysNewWindow: Always open in a new window.
  //  - whenNoFolderOpen: Only open in current window when no folder is opened.
  //  - prompt: Always prompt for action.
  "git.openAfterClone": "prompt",

  // Controls whether the diff editor should be opened when clicking a change. Otherwise the regular editor will be opened.
  "git.openDiffOnClick": true,

  // Path and filename of the git executable, e.g. `C:\Program Files\Git\bin\git.exe` (Windows). This can also be an array of string values containing multiple paths to look up.
  "git.path": null,

  // Runs a git command after a successful commit.
  //  - none: Don't run any command after a commit.
  //  - push: Run 'Git Push' after a successful commit.
  //  - sync: Run 'Git Sync' after a successful commit.
  "git.postCommitCommand": "none",

  // Controls whether Git should check for unsaved files before committing.
  //  - always: Check for any unsaved files.
  //  - staged: Check only for unsaved staged files.
  //  - never: Disable this check.
  "git.promptToSaveFilesBeforeCommit": "always",

  // Controls whether Git should check for unsaved files before stashing changes.
  //  - always: Check for any unsaved files.
  //  - staged: Check only for unsaved staged files.
  //  - never: Disable this check.
  "git.promptToSaveFilesBeforeStash": "always",

  // Prune when fetching.
  "git.pruneOnFetch": false,

  // Fetch all tags when pulling.
  "git.pullTags": true,

  // Force git to use rebase when running the sync command.
  "git.rebaseWhenSync": false,

  // List of folders that are ignored while scanning for Git repositories when `git.autoRepositoryDetection` is set to `true` or `subFolders`.
  "git.repositoryScanIgnoredFolders": [
    "node_modules"
  ],

  // Controls the depth used when scanning workspace folders for Git repositories when `git.autoRepositoryDetection` is set to `true` or `subFolders`. Can be set to `-1` for no limit.
  "git.repositoryScanMaxDepth": 1,

  // Controls whether to require explicit Git user configuration or allow Git to guess if missing.
  "git.requireGitUserConfig": true,

  // List of paths to search for git repositories in.
  "git.scanRepositories": [],

  // Controls whether to show the commit input in the Git source control panel.
  "git.showCommitInput": true,

  // Controls whether to show an inline Open File action in the Git changes view.
  "git.showInlineOpenFileAction": true,

  // Controls whether git actions should show progress.
  "git.showProgress": true,

  // Controls whether to show a notification when a push is successful.
  "git.showPushSuccessNotification": false,

  // Controls whether to show an action button to sync or publish, if there are unpublished commits.
  //  - always: Always shows the action button, if there are unpublished commits.
  //  - whenEmpty: Only shows the action button if there are no other changes and there are unpublished commits.
  //  - never: Never shows the action button.
  "git.showUnpublishedCommitsButton": "whenEmpty",

  // Control which changes are automatically staged by Smart Commit.
  //  - all: Automatically stage all changes.
  //  - tracked: Automatically stage tracked changes only.
  "git.smartCommitChanges": "all",

  // Controls how to limit the number of changes that can be parsed from Git status command. Can be set to 0 for no limit.
  "git.statusLimit": 10000,

  // Suggests to enable smart commit (commit all changes when there are no staged changes).
  "git.suggestSmartCommit": true,

  // Controls whether a notification comes up when running the Sync action, which allows the user to cancel the operation.
  "git.supportCancellation": false,

  // Controls whether to enable VS Code to be the authentication handler for git processes spawned in the integrated terminal. Note: terminals need to be restarted to pick up a change in this setting.
  "git.terminalAuthentication": true,

  // Controls which date to use for items in the Timeline view.
  //  - committed: Use the committed date
  //  - authored: Use the authored date
  "git.timeline.date": "committed",

  // Controls whether to show the commit author in the Timeline view.
  "git.timeline.showAuthor": true,

  // Controls whether to show uncommitted changes in the Timeline view.
  "git.timeline.showUncommitted": false,

  // Controls how untracked changes behave.
  //  - mixed: All changes, tracked and untracked, appear together and behave equally.
  //  - separate: Untracked changes appear separately in the Source Control view. They are also excluded from several actions.
  //  - hidden: Untracked changes are hidden and excluded from several actions.
  "git.untrackedChanges": "mixed",

  // Controls whether to use the message from the commit input box as the default stash message.
  "git.useCommitInputAsStashMessage": false,

  // Controls whether force pushing uses the safer force-with-lease variant.
  "git.useForcePushWithLease": true,

  // Controls whether GIT_ASKPASS should be overwritten to use the integrated version.
  "git.useIntegratedAskPass": true,

// =========================================================================

  // Controls whether to enable automatic GitHub authentication for git commands within VS Code.
  "github.gitAuthentication": true,

  // Controls which protocol is used to clone a GitHub repository
  "github.gitProtocol": "https",

  // URI of your GitHub Enterprise Instance
  "github-enterprise.uri": "",


}
